import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.projections import geo
import os
import numpy as np
from obspy.geodetics import gps2dist_azimuth
from obspy.core import UTCDateTime
import datetime
from pathlib import Path
import pytz
import obspy

def make_base_dir(base_dir):
	base_dir = Path(base_dir)
	if not base_dir.exists():
		current_path = Path("/")
		for parent in base_dir.parts:
			current_path = current_path/parent
			if not current_path.exists():
				current_path.mkdir()
		
def distance(lat1, lon1, lat2, lon2):
	dist = gps2dist_azimuth(lat1, lon1, lat2, lon2)
	dist_km = dist[0]/1000
	return dist_km

def dist_less(flight_latitudes, flight_longitudes, seismo_latitudes, seismo_longitudes):
	f = False
	for s in range(len(flight_latitudes)):
		for l in range(len(seismo_latitudes)):
			dist = distance(seismo_latitudes[l], seismo_longitudes[l], flight_latitudes[s], flight_longitudes[s])
			if dist <= 5:
				f = True
				break
			else:
				continue
	return f 

def calc_time(t, l, vo):
	#t is epoch time at time wave is generated by aircraft
	#l is the shortest distance to between the station and aircraft
	#vo is the aircraft velocity
	#c is the speed of aucostic wave propogation
	c = 0.343
	to=t+(sqrt(l**2+(vo*t)**2))/c
	return to
 
sta_f = open('all_station_crossing_db.txt','r')

min_lon = -150.5
max_lon = -147.5
min_lat = 62
max_lat = 65.5

# Load the seismometer location data
seismo_data = pd.read_csv('perm_stations.txt', sep="|")
seismo_latitudes = seismo_data['Latitude']
seismo_longitudes = seismo_data['Longitude']
sta = seismo_data['Station']

#Loop through each station in text file that we already know comes within 2km of the nodes			
for line in sta_f.readlines():
	val = line.split(',')
	date = val[0]
	flight = val[1]
	station = val[5]
	
	if val[5].isdigit() == False:
		print(station)
		flight_file = '/scratch/irseppi/nodal_data/flightradar24/' + date + '_positions/' + date + '_' + flight + '.csv'
		flight_data = pd.read_csv(flight_file, sep=",")
		flight_latitudes = flight_data['latitude']
		flight_longitudes = flight_data['longitude']
		time = flight_data['snapshot_id']
		speed = flight_data['speed']
		alt = flight_data['altitude']

		for line  in range(len(sta)):
			if sta[line] == station:
				for l in range(len(flight_latitudes)):
					dist = distance(seismo_latitudes[line], seismo_longitudes[line], flight_latitudes[l], flight_longitudes[l])
					if dist <= 2:
						y =[flight_latitudes[l],  seismo_latitudes[line]]
						x = [flight_longitudes[l], seismo_longitudes[line]]
						yy = sum(y)/len(y)
						xx = sum(x)/len(x)

						#f = (np.arccos((62/111.32)*np.pi/180)/110.32)
						f = 1.0/np.cos(62*np.pi/180)
	 
						fig = plt.figure(figsize=(24,30))
						plt.gca().set_aspect(f)
						
						plt.scatter(seismo_longitudes, seismo_latitudes, c='red')
						
						plt.scatter(flight_longitudes, flight_latitudes, c='b')

						#Label station
						plt.text(seismo_longitudes[line], seismo_latitudes[line], sta[line], fontsize=9, fontweight='bold')
						plt.scatter(seismo_longitudes[line], seismo_latitudes[line], c='pink')
						
						ht = datetime.datetime.utcfromtimestamp(time[l])

						#Label timestamp 
						plt.text(flight_longitudes[l], flight_latitudes[l], ht, fontsize=9, fontweight='bold')
						plt.scatter(flight_longitudes[l], flight_latitudes[l], c='orange')
						
						
						#plt.plot(x,y, '--', c='orange')
						
						#plt.text(xx,yy, str(round(dist, 2))+'km', fontsize=8, fontweight='bold')
						
						# Set labels and title
						plt.xlim(min_lon, max_lon)
						plt.ylim(min_lat, max_lat)
						#ax.tick_params(axis='both', which='major', labelsize=9)
						#Save
						#plt.title('Date: ' + date + ' | Flight: ' + flight + ' | Station: ' + station + '\n | Speed: '+str(round(speed[l]*0.514444,2))+'m/s | Altitude: '+str(round(alt[l]*0.3048,2))+'m')
						BASE_DIR = '/scratch/irseppi/nodal_data/plane_info/pmap/' + date + '/'+flight+'/'+station+'/'
						make_base_dir(BASE_DIR)
						plt.savefig('/scratch/irseppi/nodal_data/plane_info/pmap/'+ date + '/'+flight+'/'+station+'/zmap_'+flight+'_' + str(time[l]) + '.png')
						plt.close()
						
					else:
						continue
				
			else:
				continue


flight_files=[]
filenames = []

# Load the seismometer location data
seismo_data = pd.read_csv('nodes_stations.txt', sep="|")
seismo_latitudes = seismo_data['Latitude']
seismo_longitudes = seismo_data['Longitude']
seismo_stations = seismo_data['Latitude']
sta = seismo_data['Station']

for month in (2,4):
	if month == 2:
		month = '02'
		for day in range(20,29):
			day = str(day)
			# assign directory
			directory = '/scratch/irseppi/nodal_data/flightradar24/2019'+month+day+'_positions'

			# iterate over files in directory
			for filename in os.listdir(directory):
				filenames.append(filename)
				f = os.path.join(directory, filename)
				
				# checking if it is a file
				if os.path.isfile(f):
					flight_files.append(f)
	elif month == 3:
		month = '03'
		for day in range(1, 15):
			if day < 10:
				day = '0' + str(day)
				# assign directory
				directory = '/scratch/irseppi/nodal_data/flightradar24/2019'+month+day+'_positions'
			
				# iterate over files in directory
				for filename in os.listdir(directory):
					filenames.append(filename)
					f = os.path.join(directory, filename)
					
					# checking if it is a file
					if os.path.isfile(f):
						flight_files.append(f)
			else:
				day = str(day)
				# assign directory
				directory = '/scratch/irseppi/nodal_data/flightradar24/2019'+month+day+'_positions'
				
				# iterate over files in directory
				for filename in os.listdir(directory):
					filenames.append(filename)
					f = os.path.join(directory, filename)
					
					# checking if it is a file
					if os.path.isfile(f):
						flight_files.append(f)
				

for i, flight_file in enumerate(flight_files):
	flight_data = pd.read_csv(flight_file, sep=",")
	flight_latitudes = flight_data['latitude']
	flight_longitudes = flight_data['longitude']
	time = flight_data['snapshot_id']
	speed = flight_data['speed']
	alt = flight_data['altitude']

	con = dist_less(flight_latitudes, flight_longitudes, seismo_latitudes, seismo_longitudes)
	if con == True:	
		# Create a scatter plot for the seismometer locations
		for sd in range(len(seismo_data)):	
			for fd in range(len(flight_data)):
				dist = distance(seismo_latitudes[sd], seismo_longitudes[sd], flight_latitudes[fd], flight_longitudes[fd])
				if dist <= 5:
					print(dist)
					station = str(sta[sd])
					
					ht = datetime.datetime.utcfromtimestamp(time[fd])
							
					h = ht.hour
					month = ht.month
					day = ht.day
					mins = ht.minute
					secs = ht.second
					
					month2 = str(month)
					if month == 3 and day < 10:
						day1 = '0'+str(day)
						print(month, day1)
					else:
						day1 = str(day)
						print(month, day1)
					if h < 23:
						h_u = str(h+1)			
						day2 = day1
						print(day2, h_u)
					else:
						h_u = '00'
						if month == '02' and day == '28':
							month2 = '03'
							day2 = '01'
							print(month2, day2, h_u) 
						else:
							day2 = str(day + 1)
							print(month2, day2, h_u) 
					
					n = "/scratch/naalexeev/NODAL/2019-"+str(month)+"-"+str(day)+"T"+str(h)+":00:00.000000Z.2019-"+month2+"-"+day2+"T"+h_u+":00:00.000000Z."+station+".mseed"
					print(n)
					if os.path.isfile(n):
						print('made it')
						tr = obspy.read(n)
						t = spec_mins[spec] * 60 + 60 + spec_sec[spec]
						l = dist_ps[spec]
						vo = speed_p[spec]
						xloc = calc_time(t, l, vo)

						tr[2].trim(tr[2].stats.starttime + spec_mins[spec] * 60 - 60 + spec_sec[spec], tr[2].stats.starttime + spec_mins[spec] * 60 + 60 + spec_sec[spec])
						fig, (ax1, ax2) = plt.subplots(2, 1, layout='constrained')
						#fig, ax = plt.subplots()
						ax1.set_xlabel('Time')
						ax1.axvline(x=xloc, ls = '--')
						ax1.set_ylabel('Frequency (Hz)')
						ax1.xaxis_date('UTC')
						ax1.set_title(filenames[i]+' Station:'+spec_stations[spec])
						# Save the plot
						tr[2].spectrogram(axes = ax,log=False, outfile = 'Plane_map_spec/spec_'+spec_stations[spec]+'_'+filenames[i]+'.png', fmt='.png', dbscale=True,cmap='hsv', show=False)

						tr[2].plot(outfile = '/scratch/irseppi/nodal_data/Plane_map_spec/trace_'+spec_stations[spec]+'_'+filenames[i]+'.png', show = False)
						fig.savefig('/scratch/irseppi/nodal_data/Plane_map_spec/spec_trace_'+spec_stations[spec]+'_'+filenames[i]+'.png')
							
				else:
					continue
			
	else:
		continue
	print(i/len(flight_files), '% Done')	

